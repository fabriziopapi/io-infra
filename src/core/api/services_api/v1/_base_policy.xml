<policies>
    <inbound>
        <base />
        <choose>
            <!-- Only authorized users can send DGC messages -->
            <when condition="@(context.User.Groups.Any(g => g.Name == "ApiAuthenticationClientCertificate") && !(context.Request.Headers.GetValueOrDefault("{{apigad-gad-client-certificate-verified-header}}", "false") == "true"))">
                <return-response>
                    <set-status code="403" reason="Invalid client certificate" />
                </return-response>
            </when>
            <!-- All API, user-based rate limit -->
            <when condition="@(context.User.Groups.All(g =&gt; g.Name != &quot;ApiNoRateLimit&quot;))">
                <rate-limit calls="150" renewal-period="5" remaining-calls-header-name="x-rate-limit-remaining" retry-after-header-name="x-rate-limit-retry-after" />
            </when>
            <!-- Service management API, user-based rate limit -->
            <when condition="@( [&quot;createService&quot;, &quot;getUserServices&quot;, &quot;updateService&quot;].Contains(context.Operation.Id))">
                <rate-limit calls="5" renewal-period="5" remaining-calls-header-name="x-rate-limit-remaining" retry-after-header-name="x-rate-limit-retry-after" />
            </when>
        </choose>
        <set-backend-service id="apim-generated-policy" base-url="{{io-fn3-services-url}}/api/v1" />
        <set-header name="x-functions-key" exists-action="override">
            <value>{{io-fn3-services-key}}</value>
        </set-header>
        <set-header name="x-user-id" exists-action="override">
            <value>@(context.User.Id)</value>
        </set-header>
        <set-header name="x-user-groups" exists-action="override">
            <value>@(String.Join(",", context.User.Groups.Select(g => g.Name)))</value>
        </set-header>
        <set-header name="x-subscription-id" exists-action="override">
            <value>@(context.Subscription.Id)</value>
        </set-header>
        <set-header name="x-user-email" exists-action="override">
            <value>@(context.User.Email)</value>
        </set-header>
        <cors>
            <allowed-origins>
                <origin>*</origin>
            </allowed-origins>
            <allowed-methods>
                <method>*</method>
            </allowed-methods>
            <allowed-headers>
                <header>*</header>
            </allowed-headers>
            <expose-headers>
                <header>*</header>
            </expose-headers>
        </cors>
    </inbound>
    <outbound>
        <base />
    </outbound>
    <backend>
        <base />
    </backend>
    <on-error>
        <base />
    </on-error>
</policies>